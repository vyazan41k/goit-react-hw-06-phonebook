{"version":3,"sources":["redux/contacts/contacts-actoins.js","components/Form/Form.js","components/Filter/Filter.js","components/ContactsList/ContactsList.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","filterContacts","Form","state","inputFormChange","event","currentTarget","value","setState","formSubmit","e","preventDefault","props","contacts","items","find","contact","alert","onSubmit","this","type","onChange","Component","connect","dispatch","text","contactsActions","filter","filterContact","allContacts","normalFilter","toLowerCase","includes","map","onClick","App","createReducer","actions","_","combineReducers","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAgBe,GAAEA,WAbEC,YAAa,gBAAgB,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAT,MAAuB,CACrEC,QAAS,CACPF,KAAMA,EACNG,GAAIC,IAAQC,WACZJ,OAAQA,OASiBK,cALPP,YAAa,mBAKSQ,eAHrBR,YAAa,oB,OCT9BS,E,4MACJC,MAAQ,CACNT,KAAM,GACNC,OAAQ,I,EAGVS,gBAAkB,SAAAC,GAAU,IAAD,EACDA,EAAMC,cAAtBZ,EADiB,EACjBA,KAAMa,EADW,EACXA,MACd,EAAKC,SAAL,eAAiBd,EAAOa,K,EAG1BE,WAAa,SAAAC,GACXA,EAAEC,iBAEgB,EAAKC,MAAMC,SAASC,MAAMC,MAC1C,SAAAC,GAAO,OAAIA,EAAQtB,OAAS,EAAKS,MAAMT,QAIrCuB,MAAM,GAAD,OAAI,EAAKd,MAAMT,KAAf,6BACL,EAAKkB,MAAMM,SAAS,EAAKf,OAE7B,EAAKK,SAAS,CAAEd,KAAM,GAAIC,OAAQ,M,4CAGpC,WACE,OACE,uBAAMuB,SAAUC,KAAKV,WAArB,UACE,yCAEE,uBACEW,KAAK,OACL1B,KAAK,OACLa,MAAOY,KAAKhB,MAAMT,KAClB2B,SAAUF,KAAKf,qBAGnB,2CAEE,uBACEgB,KAAK,OACL1B,KAAK,SACLa,MAAOY,KAAKhB,MAAMR,OAClB0B,SAAUF,KAAKf,qBAGnB,wBAAQgB,KAAK,SAAb,gC,GA9CWE,aA4DJC,eARS,SAAApB,GACtB,OAAOA,KAGkB,SAAAqB,GAAQ,MAAK,CACtCN,SAAU,SAAAO,GAAI,OAAID,EAASE,EAAgBlC,WAAWiC,QAGzCF,CAA6CrB,GC1C7CqB,eATS,SAAApB,GAAK,MAAK,CAChCI,MAAOJ,EAAMU,SAASc,WAGG,SAAAH,GAAQ,MAAK,CACtCH,SAAU,SAAAX,GAAC,OACTc,EAASE,EAAgBzB,eAAeS,EAAEJ,cAAcC,YAG7CgB,EAlBA,SAAC,GAAyB,IAAvBhB,EAAsB,EAAtBA,MAAOc,EAAe,EAAfA,SACvB,OACE,gCACE,uDACA,uBAAOD,KAAK,OAAOb,MAAOA,EAAOc,SAAUA,UCS3CO,EAAgB,SAACC,EAAaF,GAClC,IAAMG,EAAeH,EAAOI,cAE5B,OAAOF,EAAYF,QAAO,qBAAGjC,KACtBqC,cAAcC,SAASF,OAYjBP,eARS,SAAC,GAAD,QAAGV,SAAYC,EAAf,EAAeA,MAAOa,EAAtB,EAAsBA,OAAtB,MAAsC,CAC5Dd,SAAUe,EAAcd,EAAOa,OAGN,SAAAH,GAAQ,MAAK,CACtCxB,cAAe,SAAAH,GAAE,OAAI2B,EAASE,EAAgB1B,cAAcH,QAG/C0B,EA7BM,SAAC,GAAiC,IAA/BV,EAA8B,EAA9BA,SAAUb,EAAoB,EAApBA,cAChC,OACE,6BACGa,EAASoB,KAAI,gBAAGpC,EAAH,EAAGA,GAAIH,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACZ,+BACGD,EADH,KACWC,EACT,wBAAQuC,QAAS,kBAAMlC,EAAcH,IAArC,sBAFOA,WCoEFsC,E,4JAhBb,WAIE,OACE,gCACE,2CACA,cAAC,EAAD,IACA,0CACA,cAAC,EAAD,IACA,cAAC,EAAD,W,GA/DUb,a,eCHZR,EAAQsB,YAAc,IAAD,mBACxBC,EAAQ7C,YAAa,SAACW,EAAD,OAAUP,EAAV,EAAUA,QAAV,4BAA4BO,GAA5B,CAAmCP,OADhC,cAExByC,EAAQrC,eAAgB,SAACG,EAAD,OAAUP,EAAV,EAAUA,QAAV,OACvBO,EAAMwB,QAAO,qBAAG9B,KAAgBD,QAHT,IAMrB+B,EAASS,YAAc,GAAD,eACzBC,EAAQpC,gBAAiB,SAACqC,EAAD,YAAM1C,YAGnB2C,cAAgB,CAC7BzB,QACAa,WCNaa,EAPDC,YAAe,CAC3BC,QAAS,CACP7B,SAAU8B,GAEZC,UAAUC,ICDZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUR,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJS,SAASC,eAAe,W","file":"static/js/main.a052de88.chunk.js","sourcesContent":["import shortid from 'shortid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContact = createAction('contacts/add', ({ name, number }) => ({\r\n  payload: {\r\n    name: name,\r\n    id: shortid.generate(),\r\n    number: number,\r\n  },\r\n}));\r\n\r\nconst deleteContact = createAction('contacts/delete');\r\n\r\nconst filterContacts = createAction('contacts/filter');\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { addContact, deleteContact, filterContacts };\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actoins';\n\nclass Form extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  inputFormChange = event => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  formSubmit = e => {\n    e.preventDefault();\n\n    const duplicate = this.props.contacts.items.find(\n      contact => contact.name === this.state.name,\n    );\n\n    duplicate\n      ? alert(`${this.state.name} is already in contacts.`)\n      : this.props.onSubmit(this.state);\n\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.formSubmit}>\n        <label>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={this.state.name}\n            onChange={this.inputFormChange}\n          />\n        </label>\n        <label>\n          Number\n          <input\n            type=\"text\"\n            name=\"number\"\n            value={this.state.number}\n            onChange={this.inputFormChange}\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return state;\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: text => dispatch(contactsActions.addContact(text)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actoins';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <div>\n      <h2>Find contacts by name</h2>\n      <input type=\"text\" value={value} onChange={onChange} />\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e =>\n    dispatch(contactsActions.filterContacts(e.currentTarget.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actoins';\n\nconst ContactsList = ({ contacts, deleteContact }) => {\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id}>\n          {name}: {number}\n          <button onClick={() => deleteContact(id)}>Delete</button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nconst filterContact = (allContacts, filter) => {\n  const normalFilter = filter.toLowerCase();\n\n  return allContacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalFilter),\n  );\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contacts: filterContact(items, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteContact: id => dispatch(contactsActions.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n","import React, { Component } from 'react';\n// import shortid from 'shortid';\n\nimport Form from './components/Form';\nimport Filter from './components/Filter';\nimport ContactsList from './components/ContactsList';\n\nclass App extends Component {\n  // state = {\n  //   contacts: [],\n  //   filter: '',\n  // };\n\n  // componentDidMount() {\n  //   const contacts = localStorage.getItem('contacts');\n  //   const parsContacts = JSON.parse(contacts);\n\n  //   if (parsContacts) {\n  //     this.setState({ contacts: parsContacts });\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  // addContact = ({ name, number }) => {\n  //   const nameId = shortid.generate();\n  //   const duplicate = this.state.contacts.find(\n  //     contact => contact.name === name,\n  //   );\n\n  //   duplicate\n  //     ? alert(`${name} is already in contacts.`)\n  //     : this.setState(({ contacts }) => ({\n  //         contacts: [...contacts, { name: name, id: nameId, number: number }],\n  //       }));\n  // };\n\n  // deleteContact = id => {\n  //   this.setState(prev => ({\n  //     contacts: prev.contacts.filter(contact => contact.id !== id),\n  //   }));\n  // };\n\n  // filterContact = () => {\n  //   const { filter, contacts } = this.state;\n  //   const normalFilter = filter.toLowerCase();\n\n  //   return contacts.filter(contact =>\n  //     contact.name.toLowerCase().includes(normalFilter),\n  //   );\n  // };\n\n  // changeFiltr = e => {\n  //   this.setState({ filter: e.currentTarget.value });\n  // };\n\n  render() {\n    // const { filter } = this.state;\n    // const foundName = this.filterContact();\n\n    return (\n      <div>\n        <h3>Phonebook</h3>\n        <Form />\n        <h3>Contacts</h3>\n        <Filter />\n        <ContactsList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport actions from './contacts-actoins';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.filterContacts]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}